!classDefinition: #AccountSummaryTests category: 'ServiciosFinancieros-Parte2'!
TestCase subclass: #AccountSummaryTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!AccountSummaryTests methodsFor: 'tests' stamp: 'iO 6/15/2022 23:56:13'!
test01testNoTransferAccount
	| account summary emptyOrderedCollection reports|
	
	account := ReceptiveAccount new.
	reports := AccountSummaryReport new.
	emptyOrderedCollection := OrderedCollection new.
	
	summary := reports accept: (account transactions).
	
	self assert:summary equals:emptyOrderedCollection.! !

!AccountSummaryTests methodsFor: 'tests' stamp: 'iO 6/15/2022 23:56:13'!
test02DepositAccount
	| account summary reports |
	
	account := ReceptiveAccount new.
	Deposit register: 100 * peso on: account.
	reports := AccountSummaryReport new.
	
	summary := reports accept: (account transactions)	.
	self assert:(summary at:1) equals:'Depósito por 100 * pesos'.! !

!AccountSummaryTests methodsFor: 'tests' stamp: 'iO 6/15/2022 23:56:13'!
test03DepositWithdrawAccount
	| account summary reports|
	
	account := ReceptiveAccount new.
	Deposit register: 100 * peso on: account.
	Withdraw register: 50 * peso on: account.
	reports := AccountSummaryReport new.
	
	summary := reports			accept: (account transactions).
	self assert:(summary at:1) equals:'Depósito por 100 * pesos'.
	self assert:(summary at:2) equals:'Extracción por 50 * pesos'.! !

!AccountSummaryTests methodsFor: 'tests' stamp: 'iO 6/15/2022 23:56:13'!
test04TransferAccount
	| originAccount destinationAccount reports |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 100 * peso on: originAccount.
	
	destinationAccount := ReceptiveAccount new.
	
	Transfer amount: 50 * peso from: originAccount to: destinationAccount.
	reports := AccountSummaryReport new.
			
	self assert:((reports accept:(originAccount transactions)) at:1) equals:'Depósito por 100 * pesos'.
	self assert:((reports accept:(originAccount transactions)) at:2) equals:'Salida por transferencia de 50 * pesos'.
	self assert:((reports accept:(destinationAccount transactions)) at:1) equals:'Entrada por transferencia de 50 * pesos'.! !

!AccountSummaryTests methodsFor: 'tests' stamp: 'iO 6/15/2022 23:56:13'!
test05TransferWithdrawAccount
	| originAccount destinationAccount reports |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 100 * peso on: originAccount.
	
	destinationAccount := ReceptiveAccount new.
	
	Transfer amount: 50 * peso from: originAccount to: destinationAccount.
	Withdraw register: 25 * peso on: destinationAccount.
	reports := AccountSummaryReport new.

	self assert:((reports accept:(originAccount transactions)) at:1) equals:'Depósito por 100 * pesos'.
	self assert:((reports accept:(originAccount transactions)) at:2) equals:'Salida por transferencia de 50 * pesos'.
	self assert:((reports accept:(destinationAccount transactions)) at:1) equals:'Entrada por transferencia de 50 * pesos'.
	self assert:((reports accept:(destinationAccount transactions)) at:2) equals:'Extracción por 25 * pesos'.! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'AccountSummaryTests class' category: 'ServiciosFinancieros-Parte2'!
AccountSummaryTests class
	instanceVariableNames: ''!

!AccountSummaryTests class methodsFor: 'as yet unclassified' stamp: 'iO 6/15/2022 23:56:13'!
DoIt

| account summary emptyOrderedCollection reports|
	
	account := ReceptiveAccount new.
	reports := Reports new.
	emptyOrderedCollection := OrderedCollection new.
	
	summary := reports accept: (account transactions).
	
	self assert:summary equals:emptyOrderedCollection.! !


!classDefinition: #PortfolioReportsTest category: 'ServiciosFinancieros-Parte2'!
TestCase subclass: #PortfolioReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!PortfolioReportsTest methodsFor: 'tests' stamp: 'iO 6/16/2022 17:25:32'!
test01EmptyReport
	| portfolioTreePrinter portfolio report|
	
	portfolio := Portfolio new.  
	
	portfolioTreePrinter := PortfolioTreePrinter with:portfolio.
	report := portfolioTreePrinter accept: portfolio.
	
	self assert: (report at:1) equals: nil.

	! !

!PortfolioReportsTest methodsFor: 'tests' stamp: 'iO 6/16/2022 17:28:12'!
test02With1Accounts
	| account portfolioTreePrinter portfolio report|
	
	account := ReceptiveAccount named: 'Cuenta vacia 1'.
	portfolio := Portfolio named:'Portfolio vacio' with: account.
	
	portfolioTreePrinter := PortfolioTreePrinter with:portfolio.
	report := portfolioTreePrinter accept: portfolio.
	
	self assert: (report at:1) equals: 'Portfolio vacio'.
	self assert: (report at:2) equals: 'Cuenta vacia 1'.
	
	! !

!PortfolioReportsTest methodsFor: 'tests' stamp: 'iO 6/16/2022 18:36:49'!
test03With2Accounts
	| account anotherAccount portfolioTreePrinter portfolio report|
	
	account := ReceptiveAccount named: 'Cuenta vacia 1'.
	anotherAccount := ReceptiveAccount named: 'Cuenta vacia 2'.
	portfolio := Portfolio named:'Portfolio vacio' with: account with: anotherAccount.  
	
	portfolioTreePrinter := PortfolioTreePrinter with:portfolio.
	report := portfolioTreePrinter accept: portfolio.
	
	self assert: (report at:1) equals: 'Portfolio vacio'.
	self assert: (report at:2) equals: 'Cuenta vacia 1'.
	self assert: (report at:3) equals: 'Cuenta vacia 2'.
	
	! !

!PortfolioReportsTest methodsFor: 'tests' stamp: 'iO 6/16/2022 18:38:17'!
test04With2AccountsAnd2Portfolios
	| account account2 account3 account4 portfolioTreePrinter portfolio portfolio2 report|
	
	account := ReceptiveAccount named: 'Cuenta vacia 1'.
	account2 := ReceptiveAccount named: 'Cuenta vacia 2'.
	portfolio := Portfolio named:'Portfolio 1' with: account with: account2.  
	
	account3 := ReceptiveAccount named: 'Cuenta vacia 3'.
	account4 := ReceptiveAccount named: 'Cuenta vacia 4'.
	portfolio2 := Portfolio named:'Portfolio 2' with: account3 with: account4.  
	
	portfolio add:portfolio2.
	
	portfolioTreePrinter := PortfolioTreePrinter with:portfolio.
	report := portfolioTreePrinter accept: portfolio.
	
	self assert: (report at:1) equals: 'Portfolio 1'.
	self assert: (report at:2) equals: 'Cuenta vacia 1'.
	self assert: (report at:3) equals: 'Cuenta vacia 2'.
	self assert: (report at:4) equals: 'Portfolio 2'.
	self assert: (report at:5) equals: 'Cuenta vacia 3'.
	self assert: (report at:6) equals: 'Cuenta vacia 4'.
	
	! !

!PortfolioReportsTest methodsFor: 'tests' stamp: 'iO 6/16/2022 18:42:46'!
test05EnunciadoTest
	| myAccount johnsAccount angiesAccount familyPortfolio childrenPortfolio portfolioTreePrinter report|
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'. 
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount. 

	myAccount := ReceptiveAccount named: 'Cuenta mia'. 
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	
	portfolioTreePrinter := PortfolioTreePrinter with:familyPortfolio.
	report := portfolioTreePrinter accept: portfolioTreePrinter.
	
	self assert: (report at:1) equals: 'Portfolio de la familia'.
	self assert: (report at:2) equals: 'Cuenta mia'.
	self assert: (report at:3) equals: 'Portfolio de hijos'.
	self assert: (report at:4) equals: 'Cuenta de Juan'.
	self assert: (report at:5) equals: 'Cuenta de Angeles'.
	
	! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'PortfolioReportsTest class' category: 'ServiciosFinancieros-Parte2'!
PortfolioReportsTest class
	instanceVariableNames: ''!

!PortfolioReportsTest class methodsFor: 'as yet unclassified' stamp: 'iO 6/16/2022 18:42:16'!
DoIt

| myAccount johnsAccount angiesAccount familyPortfolio childrenPortfolio portfolioTreePrinter report|
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'. 
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount. 

	myAccount := ReceptiveAccount named: 'Cuenta mia'. 
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	
	portfolioTreePrinter := PortfolioTreePrinter with:familyPortfolio.
	report := portfolioTreePrinter accept: portfolioTreePrinter.
	
	self assert: (report at:1) equals: 'Portfolio de la familia'.
	self assert: (report at:2) equals: 'Cuenta mia'.
	self assert: (report at:3) equals: 'Portfolio de los hijos'.
	self assert: (report at:4) equals: 'Cuenta de Juan'.
	self assert: (report at:5) equals: 'Cuenta de Angeles'.! !


!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Parte2'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:27:00'!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 * peso on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:27:06'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 * peso on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 * peso on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:27:12'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100 * peso))! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:27:18'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 * peso on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:27:26'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 * peso on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 * peso on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:28:08'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 * peso on: account.
	anotherAccountWithdraw := Withdraw register: 100 * peso on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:28:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 * peso on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 * peso on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 11/29/2021 18:55:37'!
test12PortfolioCanNotIncludeItself

	| simplePortfolio |
	
	simplePortfolio := Portfolio new.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 0 equals: simplePortfolio accountsSize. ]! !

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !


!classDefinition: #ReceptiveAccountTest category: 'ServiciosFinancieros-Parte2'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:10:43'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance
! !

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:14:20'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 * peso on: account.
		
	self assert: 100 * peso equals: account balance
! !

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:14:24'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 * peso on: account.
	Withdraw register: 50 * peso on: account.
		
	self assert: 50 * peso equals: account balance
! !

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:10:14'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50 * peso.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:10:22'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 * peso on: account.
	withdraw := Withdraw register: 50 * peso on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:12:14'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100 * peso.
	withdraw := Withdraw for: 50 * peso.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered: withdraw).
! !

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:12:23'!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 * peso on: account.
		
	self assert: 1 equals: account transactions size.
	self assert: (account transactions includes: deposit).
! !


!classDefinition: #TransferNetTests category: 'ServiciosFinancieros-Parte2'!
TestCase subclass: #TransferNetTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!TransferNetTests methodsFor: 'tests' stamp: 'iO 6/15/2022 23:56:13'!
test01EmptyAccount
	| anAccount transferNet reports val|
	
	anAccount := ReceptiveAccount new.
	transferNet := anAccount transferNet.
	
	reports := TransferNetReports new.
	val := reports accept: anAccount.
	
	self assert:val equals:0.
	
	
	! !

!TransferNetTests methodsFor: 'tests' stamp: 'iO 6/15/2022 23:56:13'!
test02Deposit10Pesos
	| anAccount transferNet reports |
	
	anAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on:anAccount.

	reports := TransferNetReports new.	
	
	self assert:(reports accept: anAccount) equals:10 * peso.
	
	
	! !

!TransferNetTests methodsFor: 'tests' stamp: 'iO 6/15/2022 23:56:13'!
test03WithdrawPesos
	| anAccount reports |
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 * peso on:anAccount.
	Withdraw register: 10 * peso on:anAccount.

	reports := TransferNetReports new.	
	
	self assert:(reports accept: anAccount) equals:90 * peso.
	
	
	! !

!TransferNetTests methodsFor: 'tests' stamp: 'iO 6/15/2022 23:56:13'!
test04Withdraw10Pesos
	| anAccount reports|
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 * peso on:anAccount.
	Withdraw register: 10 * peso on:anAccount.
	Deposit register: 10 * peso on:anAccount.

	reports := TransferNetReports new.	
	
	self assert:(reports accept:anAccount) equals:100 * peso.
	
	
	! !

!TransferNetTests methodsFor: 'tests' stamp: 'iO 6/15/2022 23:56:13'!
test05Transfer100Pesos
	| originAccount destinationAccount transferNet reports transfer|
	
	originAccount := ReceptiveAccount new.
	Deposit register: 100 * peso on:originAccount.
	Withdraw register: 10 * peso on:originAccount.
	
	destinationAccount  := ReceptiveAccount new.
	
	transfer := Transfer amount: 10 * peso from: originAccount to: destinationAccount.
	reports := TransferNetReports new.	
	
	self assert:(reports accept:originAccount) equals:80 * peso.
	self assert:(reports accept:destinationAccount) equals:10 * peso.
	
	
	! !

!TransferNetTests methodsFor: 'tests' stamp: 'iO 6/15/2022 23:56:13'!
test06EnunciadoTest
	| originAccount destinationAccount reports transfer|
	
	originAccount := ReceptiveAccount new.
	Deposit register: 100 * peso on:originAccount.
	Withdraw register: 50 * peso on:originAccount.
	
	destinationAccount  := ReceptiveAccount new.
	Deposit register: 10 * peso on:destinationAccount.
	
	transfer := Transfer amount: 20 * peso from: originAccount to: destinationAccount.
	transfer := Transfer amount: 30 * peso from: destinationAccount to: originAccount.

	reports := TransferNetReports new.	
	
	self assert:(reports accept:originAccount) equals:60 * peso.
	self assert:(reports accept:destinationAccount) equals:0 * peso.
	
	
	! !


!classDefinition: #TransferTest category: 'ServiciosFinancieros-Parte2'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!TransferTest methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 21:07:03'!
test01ATransferDecreasesBalanceFromOriginAccountAndIncreasesItForDestinationAccount

	| destinationAccount originAccount |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: originAccount.
	
	destinationAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: destinationAccount.
	
	Transfer amount: 2 * peso from: originAccount to: destinationAccount.
	
	self assert: 8 * peso equals: originAccount balance.
	self assert: 12 * peso equals: destinationAccount balance.! !

!TransferTest methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 21:12:28'!
test02ATransferKnowsItsValue

	| destinationAccount originAccount transfer |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: originAccount.
	
	destinationAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: destinationAccount.
	
	transfer := Transfer amount: 2 * peso from: originAccount to: destinationAccount.
	
	self assert: 2 * peso equals: transfer value.! !

!TransferTest methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 23:01:44'!
test03DepositLegKnowsItsWithdrawCounterpart

	| destinationAccount originAccount transfer |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: originAccount.
	
	destinationAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: destinationAccount.
	
	transfer := Transfer amount: 2 * peso from: originAccount to: destinationAccount.
	
	self assert: transfer withdrawLeg equals: transfer depositLeg withdrawLeg! !

!TransferTest methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 23:01:51'!
test04WithdrawLegKnowsItsDepositCounterpart

	| destinationAccount originAccount transfer |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: originAccount.
	
	destinationAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: destinationAccount.
	
	transfer := Transfer amount: 2 * peso from: originAccount to: destinationAccount.
	
	self assert: transfer depositLeg equals: transfer withdrawLeg depositLeg! !

!TransferTest methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 23:02:36'!
test05OriginAndDestinationAccountsCannotBeTheSame

	| originAccount |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: originAccount.
	
	self should: [ Transfer amount: 2 * peso from: originAccount to: originAccount ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer cannotTransferToOriginErrorDescription equals: anError messageText.
			self assert: 10 * peso equals: originAccount balance.
		]
! !

!TransferTest methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 23:02:44'!
test06CannotTransferAZeroAmount

	| originAccount destinationAccount |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: originAccount.
	
	destinationAccount := ReceptiveAccount new.
	Deposit register: 5 * peso on: destinationAccount.
	
	self should: [ Transfer amount: 0 from: originAccount to: destinationAccount ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer cannotTransferZeroErrorDescription equals: anError messageText.
			self assert: 10 * peso equals: originAccount balance.
		]
! !


!classDefinition: #Account category: 'ServiciosFinancieros-Parte2'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!Account methodsFor: 'main protocol' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !

!Account methodsFor: 'main protocol' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !

!Account methodsFor: 'main protocol' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !


!Account methodsFor: 'composition' stamp: 'LL 7/8/2021 21:45:50'!
addedTo: aPortfolio

	self subclassResponsibility! !

!Account methodsFor: 'composition' stamp: 'LL 7/8/2021 21:46:48'!
isComposedBy: anAccount

	self subclassResponsibility! !


!Account methodsFor: 'private' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !


!classDefinition: #Portfolio category: 'ServiciosFinancieros-Parte2'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18'!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !


!Portfolio methodsFor: 'main protocol' stamp: 'HAW 5/25/2019 11:19:36'!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !

!Portfolio methodsFor: 'main protocol' stamp: 'HAW 5/25/2019 11:28:29'!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !

!Portfolio methodsFor: 'main protocol' stamp: 'iO 6/16/2022 16:16:45'!
name: aName
	name := aName.! !

!Portfolio methodsFor: 'main protocol' stamp: 'HAW 5/25/2019 11:38:32'!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !


!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !

!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !

!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !

!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !


!Portfolio methodsFor: 'private' stamp: 'HAW 5/25/2019 11:42:55'!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !


!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !

!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59'!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !

!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !

!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !

!Portfolio methodsFor: 'composition' stamp: 'HAW 5/29/2019 16:24:54'!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !

!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !

!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !


!Portfolio methodsFor: 'reports' stamp: 'iO 6/16/2022 18:36:22'!
visit: collection	
	collection add:name.	
	accounts do: [ :account | (account visit:collection) ].
	^collection.! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Portfolio class' category: 'ServiciosFinancieros-Parte2'!
Portfolio class
	instanceVariableNames: ''!

!Portfolio class methodsFor: 'error' stamp: 'HAW 5/25/2019 11:48:55'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !


!Portfolio class methodsFor: 'initialization' stamp: 'iO 6/16/2022 17:29:08'!
named: aName with: anAccount 

	^self new 
		name: aName;
		add: anAccount;
		yourself! !

!Portfolio class methodsFor: 'initialization' stamp: 'iO 6/16/2022 16:14:39'!
named: aName with: anAccount with: anotherAccount

	^self new 
		name: aName;
		add: anAccount;
		add: anotherAccount;
		yourself! !

!Portfolio class methodsFor: 'initialization' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !

!Portfolio class methodsFor: 'initialization' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !


!classDefinition: #ReceptiveAccount category: 'ServiciosFinancieros-Parte2'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35'!
initialize

	super initialize.
	transactions := OrderedCollection new.! !


!ReceptiveAccount methodsFor: 'main protocol' stamp: 'HAW 5/25/2019 11:24:46'!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !

!ReceptiveAccount methodsFor: 'main protocol' stamp: 'NR 10/21/2019 18:55:56'!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !

!ReceptiveAccount methodsFor: 'main protocol' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !

!ReceptiveAccount methodsFor: 'main protocol' stamp: 'HernanWilkinson 7/13/2011 18:37'!
transactions 

	^ transactions copy! !


!ReceptiveAccount methodsFor: 'private' stamp: 'HAW 5/25/2019 11:38:52'!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !


!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32'!
addedTo: aPortfolio 
	
	! !

!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 11:54:51'!
isComposedBy: anAccount

	^self = anAccount ! !


!ReceptiveAccount methodsFor: 'reports' stamp: 'iO 6/16/2022 18:33:16'!
visit: collection
	^ collection add:name.
	! !


!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'iO 6/16/2022 00:20:17'!
name: aName
	name := aName.! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'ReceptiveAccount class' category: 'ServiciosFinancieros-Parte2'!
ReceptiveAccount class
	instanceVariableNames: ''!

!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'iO 6/16/2022 00:22:10'!
named: aName
	| account |
	account := self new.
	account name: aName.
	^account.! !


!classDefinition: #AccountTransaction category: 'ServiciosFinancieros-Parte2'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25'!
value 

	self subclassResponsibility ! !


!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !



!classDefinition: #Deposit category: 'ServiciosFinancieros-Parte2'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !


!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38'!
value

	^ value! !


!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02'!
affectBalance: aBalance

	^aBalance + value ! !


!Deposit methodsFor: 'report' stamp: 'iO 6/15/2022 23:54:59'!
visit: transaction
	^'Depósito por ', (transaction value) asString.! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Deposit class' category: 'ServiciosFinancieros-Parte2'!
Deposit class
	instanceVariableNames: ''!

!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !


!Deposit class methodsFor: 'as yet unclassified' stamp: 'LL 7/8/2021 21:45:00'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !


!classDefinition: #TransferLeg category: 'ServiciosFinancieros-Parte2'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!TransferLeg methodsFor: 'value' stamp: 'LL 9/20/2020 22:27:32'!
value

	^transfer value! !


!TransferLeg methodsFor: 'initialization' stamp: 'LL 9/20/2020 22:28:14'!
initializeWith: aTransfer

	transfer := aTransfer! !


"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'TransferLeg class' category: 'ServiciosFinancieros-Parte2'!
TransferLeg class
	instanceVariableNames: ''!

!TransferLeg class methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 22:45:01'!
of: aTransfer on: anAccount

	| transaction |
	
	transaction := self new initializeWith: 	aTransfer.
	anAccount register: transaction.	
	
	^transaction! !


!classDefinition: #TransferDepositLeg category: 'ServiciosFinancieros-Parte2'!
TransferLeg subclass: #TransferDepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!TransferDepositLeg methodsFor: 'accessing' stamp: 'LL 9/20/2020 22:26:10'!
withdrawLeg

	^transfer withdrawLeg! !


!TransferDepositLeg methodsFor: 'balance' stamp: 'LL 9/20/2020 22:27:49'!
affectBalance: aBalance

	^aBalance + self value! !


!TransferDepositLeg methodsFor: 'as yet unclassified' stamp: 'io 6/9/2022 21:43:09'!
printForReport
	^'Salida por transferencia de XX pesos'.! !

!TransferDepositLeg methodsFor: 'as yet unclassified' stamp: 'iO 6/15/2022 23:54:59'!
visit: transaction
	^'Entrada por transferencia de ', (transaction value) asString.! !


!classDefinition: #TransferWithdrawLeg category: 'ServiciosFinancieros-Parte2'!
TransferLeg subclass: #TransferWithdrawLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!TransferWithdrawLeg methodsFor: 'accessing' stamp: 'LL 9/20/2020 22:25:47'!
depositLeg

	^transfer depositLeg! !

!TransferWithdrawLeg methodsFor: 'accessing' stamp: 'io 6/13/2022 20:33:04'!
printTransaction
	^'Salida por transferencia de ', (self value) asString.! !

!TransferWithdrawLeg methodsFor: 'accessing' stamp: 'iO 6/15/2022 23:54:59'!
visit: transaction
	^'Salida por transferencia de ', (transaction value) asString.! !


!TransferWithdrawLeg methodsFor: 'balance' stamp: 'LL 9/20/2020 22:27:55'!
affectBalance: aBalance

	^aBalance - self value! !


!classDefinition: #Withdraw category: 'ServiciosFinancieros-Parte2'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !


!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33'!
value

	^ value! !


!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15'!
affectBalance: aBalance

	^aBalance - value! !


!Withdraw methodsFor: 'report' stamp: 'iO 6/15/2022 23:54:59'!
visit: transaction
	^'Extracción por ', (transaction value) asString.! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Withdraw class' category: 'ServiciosFinancieros-Parte2'!
Withdraw class
	instanceVariableNames: ''!

!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !


!Withdraw class methodsFor: 'as yet unclassified' stamp: 'LL 7/8/2021 21:45:05'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !


!classDefinition: #Reports category: 'ServiciosFinancieros-Parte2'!
Object subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!Reports methodsFor: 'as yet unclassified' stamp: 'iO 6/15/2022 23:56:13'!
accept:transactions
	self subclassResponsibility.! !

!Reports methodsFor: 'as yet unclassified' stamp: 'iO 6/14/2022 17:58:15'!
computeTransferNet: anAccount
	self subclassResponsibility.! !

!Reports methodsFor: 'as yet unclassified' stamp: 'iO 6/15/2022 23:54:59'!
visit: transaction
	self subclassResponsibility.! !


!classDefinition: #AccountSummaryReport category: 'ServiciosFinancieros-Parte2'!
Reports subclass: #AccountSummaryReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!AccountSummaryReport methodsFor: 'summary' stamp: 'iO 6/15/2022 23:56:13'!
accept: transactions
	| ret_value |
	ret_value := OrderedCollection new.
	
	transactions do: [ :transaction | ret_value add:(self visit:transaction)].
	^ret_value.! !

!AccountSummaryReport methodsFor: 'summary' stamp: 'iO 6/15/2022 23:54:59'!
visit: transaction
	^transaction visit: transaction.! !


!classDefinition: #PortfolioTreePrinter category: 'ServiciosFinancieros-Parte2'!
Reports subclass: #PortfolioTreePrinter
	instanceVariableNames: 'accounts rootPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!PortfolioTreePrinter methodsFor: 'private' stamp: 'iO 6/16/2022 16:26:35'!
rootPortfolio: aPortfolio
	rootPortfolio := aPortfolio.! !


!PortfolioTreePrinter methodsFor: 'reports' stamp: 'iO 6/16/2022 18:33:52'!
accept: transactions
	| collection |
	collection := OrderedCollection new.
	^(rootPortfolio visit:collection).
	! !


!PortfolioTreePrinter methodsFor: 'as yet unclassified' stamp: 'iO 6/16/2022 00:32:19'!
initialize
	accounts := OrderedCollection new.! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'PortfolioTreePrinter class' category: 'ServiciosFinancieros-Parte2'!
PortfolioTreePrinter class
	instanceVariableNames: 'rootPortfolio'!

!PortfolioTreePrinter class methodsFor: 'initialization' stamp: 'iO 6/16/2022 17:00:01'!
with: aPortfolio
	| portfolioTreePrinter |
	portfolioTreePrinter := PortfolioTreePrinter new.
	portfolioTreePrinter rootPortfolio: aPortfolio.
	^portfolioTreePrinter.
	
"with: aPortfolio

	^self new 
		rootPortfolio aPortfolio;
		yourself"! !


!classDefinition: #TransferNetReports category: 'ServiciosFinancieros-Parte2'!
Reports subclass: #TransferNetReports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!TransferNetReports methodsFor: 'as yet unclassified' stamp: 'iO 6/15/2022 23:56:13'!
accept: anAccount
	| ret_value |
	ret_value := 0.
	
	(anAccount transactions) do: [ :transaction | ret_value := (transaction affectBalance: ret_value) ].
	^ret_value.
! !


!classDefinition: #Transfer category: 'ServiciosFinancieros-Parte2'!
Object subclass: #Transfer
	instanceVariableNames: 'value withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Parte2'!

!Transfer methodsFor: 'value' stamp: 'LL 9/20/2020 21:13:00'!
value

	^value! !


!Transfer methodsFor: 'accessing' stamp: 'LL 9/20/2020 22:39:46'!
depositLeg

	^depositLeg! !

!Transfer methodsFor: 'accessing' stamp: 'LL 9/20/2020 21:25:56'!
withdrawLeg
	
	^withdrawLeg! !


!Transfer methodsFor: 'initialization' stamp: 'LL 9/20/2020 21:25:21'!
initializeWith: aValue withdrawLeg: aWithdraw depositLeg: aDeposit

	value := aValue.
	withdrawLeg := aWithdraw.
	depositLeg := aDeposit! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Transfer class' category: 'ServiciosFinancieros-Parte2'!
Transfer class
	instanceVariableNames: ''!

!Transfer class methodsFor: 'errors' stamp: 'LL 9/20/2020 22:57:30'!
cannotTransferToOriginErrorDescription
	
	^'Transfer destionation cannot be the origin account'! !

!Transfer class methodsFor: 'errors' stamp: 'LL 9/20/2020 23:00:53'!
cannotTransferZeroErrorDescription

	^'Transfer amount should be positive'! !

!Transfer class methodsFor: 'errors' stamp: 'LL 9/20/2020 22:56:35'!
signalCannotTransferToOrigin
	
	self error: self cannotTransferToOriginErrorDescription! !

!Transfer class methodsFor: 'errors' stamp: 'LL 9/20/2020 23:06:17'!
signalCannotTransferZero

	self error: self cannotTransferZeroErrorDescription! !


!Transfer class methodsFor: 'assertions' stamp: 'LL 9/20/2020 23:05:22'!
assert: anAmountOfMoney canBeTransferedTo: destinationAccount from: originAccount

	self assertCanTransferTo: destinationAccount from: originAccount.
	self assertCanTransfer: anAmountOfMoney! !

!Transfer class methodsFor: 'assertions' stamp: 'LL 9/20/2020 23:11:50'!
assertCanTransfer: anAmountOfMoney

	^ anAmountOfMoney isZero ifTrue: [ self signalCannotTransferZero ]! !

!Transfer class methodsFor: 'assertions' stamp: 'LL 9/20/2020 23:04:58'!
assertCanTransferTo: destinationAccount from: originAccount

	^ originAccount = destinationAccount ifTrue: [ self signalCannotTransferToOrigin ]! !


!Transfer class methodsFor: 'instance creation' stamp: 'LL 9/20/2020 23:11:34'!
amount: anAmountOfMoney from: originAccount to: destinationAccount 
	
	| transfer depositLeg withdrawLeg |
	
	self assert: anAmountOfMoney canBeTransferedTo: destinationAccount from: originAccount.
	
	transfer := self new.
	
	withdrawLeg := TransferWithdrawLeg of: transfer on: originAccount.
	depositLeg := TransferDepositLeg of: transfer on: destinationAccount.
	
	^transfer initializeWith: anAmountOfMoney withdrawLeg: withdrawLeg depositLeg: depositLeg
	
	
	! !
